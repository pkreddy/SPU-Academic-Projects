}
#print(C/N)
plot(S,type="l")
dev.copy(jpeg,filename = paste("C:/Users/prana/Desktop/",seed,".jpeg" , sep = "") );
dev.off();
return(exp(-r*T)*C/N)
}
data1 <- data.frame()
for(i in 1:2){
set.seed(i)
t <- system.time(d <- problem2(i))
data1 <- rbind(data1,c(i,t[3],d))
}
################  problem 2  ######################
problem2 <- function(seed){
K = 100
r = .015
C = 0
mu = 0.15
sigma = sqrt(.15)
N = 100000
T = 0.5
S = vector()
S[1] = 110
dt = 0.5/600
for(j in 1:N){
for (i in 2:600){
S[i] = S[i-1] + mu * S[i-1] * dt + sigma * S[i-1] * rnorm(1) * sqrt(dt)
flag = 1
if(S[i] <= 80){
#S[i] == 0
flag = 0
break
}
}
if(flag == 1){C = C + max(K - S[600], 0)}
}
#print(C/N)
plot(S,type="l")
dev.copy(jpeg,filename = paste("C:/Users/prana/Desktop/",seed,".jpeg" , sep = "") );
dev.off();
return(exp(-r*T)*C/N)
}
data1 <- data.frame()
for(i in 1:2){
set.seed(i)
t <- system.time(d <- problem2(i))
data1 <- rbind(data1,c(i,t[3],d))
}
data1
################  problem 2  ######################
problem2 <- function(seed){
K = 100
r = .015
C = 0
mu = 0.15
sigma = sqrt(.15)
N = 10000
T = 0.5
S = vector()
S[1] = 110
dt = 0.5/600
for(j in 1:N){
for (i in 2:600){
S[i] = S[i-1] + mu * S[i-1] * dt + sigma * S[i-1] * rnorm(1) * sqrt(dt)
flag = 1
if(S[i] < 80){
#S[i] == 0
flag = 0
break
}
}
if(flag == 1){C = C + max(K - S[600], 0)}
}
#print(C/N)
plot(S,type="l")
dev.copy(jpeg,filename = paste("C:/Users/prana/Desktop/",seed,".jpeg" , sep = "") );
dev.off();
return(exp(-r*T)*C/N)
}
data1 <- data.frame()
for(i in 1:2){
set.seed(i)
t <- system.time(d <- problem2(i))
data1 <- rbind(data1,c(i,t[3],d))
}
data1
################  problem 2  ######################
problem2 <- function(seed){
K = 100
r = .015
C = 0
mu = 0.15
sigma = sqrt(.15)
N = 10000
T = 0.5
S = vector()
S[1] = 110
dt = 0.5/600
for(j in 1:N){
for (i in 2:600){
S[i] = S[i-1] + mu * S[i-1] * dt + sigma * S[i-1] * rnorm(1) * sqrt(dt)
if(S[i] < 80){
#S[i] == 0
flag = 0
break
}else{
flag = 1
}
}
if(flag == 1){C = C + max(K - S[600], 0)}
}
#print(C/N)
plot(S,type="l")
dev.copy(jpeg,filename = paste("C:/Users/prana/Desktop/",seed,".jpeg" , sep = "") );
dev.off();
return(exp(-r*T)*C/N)
}
data1 <- data.frame()
for(i in 1:2){
set.seed(i)
t <- system.time(d <- problem2(i))
data1 <- rbind(data1,c(i,t[3],d))
}
colnames(data1) <- c("seed","t","Premium")
write.csv(data1,file="Problem_2.csv")
data1
################  problem 2  ######################
problem2 <- function(seed){
count = 0
K = 100
r = .015
C = 0
mu = 0.15
sigma = sqrt(.15)
N = 10000
T = 0.5
S = vector()
S[1] = 110
dt = 0.5/600
for(j in 1:N){
for (i in 2:600){
S[i] = S[i-1] + mu * S[i-1] * dt + sigma * S[i-1] * rnorm(1) * sqrt(dt)
if(S[i] < 80){
#S[i] == 0
flag = 0
break
}else{
flag = 1
count = count + 1
}
}
if(flag == 1){C = C + max(K - S[600], 0)}
}
#print(C/N)
plot(S,type="l")
dev.copy(jpeg,filename = paste("C:/Users/prana/Desktop/",seed,".jpeg" , sep = "") );
dev.off();
print(exp(-r*T)*C/N)
prinnt(exp(-r*T)*C/count)
return(exp(-r*T)*C/N)
}
data1 <- data.frame()
for(i in 1:2){
set.seed(i)
t <- system.time(d <- problem2(i))
data1 <- rbind(data1,c(i,t[3],d))
}
prinnt(exp(-r*T)*C/(N-count))
################  problem 2  ######################
problem2 <- function(seed){
count = 0
K = 100
r = .015
C = 0
mu = 0.15
sigma = sqrt(.15)
N = 10000
T = 0.5
S = vector()
S[1] = 110
dt = 0.5/600
for(j in 1:N){
for (i in 2:600){
S[i] = S[i-1] + mu * S[i-1] * dt + sigma * S[i-1] * rnorm(1) * sqrt(dt)
if(S[i] < 80){
#S[i] == 0
flag = 0
break
}else{
flag = 1
count = count + 1
}
}
if(flag == 1){C = C + max(K - S[600], 0)}
}
#print(C/N)
plot(S,type="l")
dev.copy(jpeg,filename = paste("C:/Users/prana/Desktop/",seed,".jpeg" , sep = "") );
dev.off();
print(exp(-r*T)*C/N)
prinnt(exp(-r*T)*C/(N-count))
return(exp(-r*T)*C/N)
}
data1 <- data.frame()
for(i in 1:2){
set.seed(i)
t <- system.time(d <- problem2(i))
data1 <- rbind(data1,c(i,t[3],d))
}
colnames(data1) <- c("seed","t","Premium")
write.csv(data1,file="Problem_2.csv")
################  problem 2  ######################
problem2 <- function(seed){
count = 0
K = 100
r = .015
C = 0
mu = 0.15
sigma = sqrt(.15)
N = 10000
T = 0.5
S = vector()
S[1] = 110
dt = 0.5/600
for(j in 1:N){
for (i in 2:600){
S[i] = S[i-1] + mu * S[i-1] * dt + sigma * S[i-1] * rnorm(1) * sqrt(dt)
if(S[i] < 80){
#S[i] == 0
flag = 0
break
}else{
flag = 1
count = count + 1
}
}
if(flag == 1){C = C + max(K - S[600], 0)}
}
#print(C/N)
plot(S,type="l")
dev.copy(jpeg,filename = paste("C:/Users/prana/Desktop/",seed,".jpeg" , sep = "") );
dev.off();
print(exp(-r*T)*C/N)
print(exp(-r*T)*C/(N-count))
return(exp(-r*T)*C/N)
}
data1 <- data.frame()
for(i in 1:2){
set.seed(i)
t <- system.time(d <- problem2(i))
data1 <- rbind(data1,c(i,t[3],d))
}
################  problem 2  ######################
problem2 <- function(seed){
count = 0
K = 100
r = .015
C = 0
mu = 0.15
sigma = sqrt(.15)
N = 10000
T = 0.5
S = vector()
S[1] = 110
dt = 0.5/126
for(j in 1:N){
for (i in 2:126){
S[i] = S[i-1] + mu * S[i-1] * dt + sigma * S[i-1] * rnorm(1) * sqrt(dt)
if(S[i] < 80){
#S[i] == 0
flag = 0
break
}else{
flag = 1
}
}
if(flag == 1){C = C + max(K - S[126], 0)
count = count + 1}
}
#print(C/N)
plot(S,type="l")
dev.copy(jpeg,filename = paste("C:/Users/prana/Desktop/",seed,".jpeg" , sep = "") );
dev.off();
print(exp(-r*T)*C/N)
print(exp(-r*T)*C/(N-count))
return(exp(-r*T)*C/N)
}
data1 <- data.frame()
for(i in 1:2){
set.seed(i)
t <- system.time(d <- problem2(i))
data1 <- rbind(data1,c(i,t[3],d))
}
################  problem 2  ######################
problem2 <- function(seed){
count = 0
K = 100
r = .015
C = 0
mu = 0.15
sigma = sqrt(.15)
N = 10000
T = 0.5
S = vector()
S[1] = 110
dt = 0.5/126
for(j in 1:N){
for (i in 2:126){
S[i] = S[i-1] + mu * S[i-1] * dt + sigma * S[i-1] * rnorm(1) * sqrt(dt)
if(S[i] < 80){
#S[i] == 0
flag = 0
break
}else{
flag = 1
}
}
if(flag == 1){C = C + max(K - S[126], 0)
count = count + 1}
}
#print(C/N)
plot(S,type="l")
dev.copy(jpeg,filename = paste("C:/Users/prana/Desktop/",seed,".jpeg" , sep = "") );
dev.off();
print(exp(-r*T)*C/N)
print(exp(-r*T)*C/(count))
return(exp(-r*T)*C/N)
}
data1 <- data.frame()
for(i in 1:2){
set.seed(i)
t <- system.time(d <- problem2(i))
data1 <- rbind(data1,c(i,t[3],d))
}
colnames(data1) <- c("seed","t","Premium")
write.csv(data1,file="Problem_2.csv")
data = read.csv("E:\\Google Drive\\Spring 2018\\Maketing Analytics and Operation Research\\midterm\\Midterm1.csv")
data = read.csv("E:\\Google Drive\\Spring 2018\\Maketing Analytics and Operation Research\\midterm\\Midterm1.csv")
head(data)
dim(data)
data = read.csv("E:\\Google Drive\\Spring 2018\\Maketing Analytics and Operation Research\\midterm\\Midterm1.csv")
head(data)
dim(data)
data = read.csv("E:\\Google Drive\\Spring 2018\\Maketing Analytics and Operation Research\\midterm\\Midterm1.csv")
head(data)
dim(data)
print(dim(data))
head(data)
print(dim(data))
head(data)
dim(data)
400 * 0.8
data$rank <- factor(data$rank, levels = c(4, 3, 2, 1))
head(data)
str(data)
datarank1 <- data[mydata$rank == 1, ]
datarank1 <- data[data$rank == 1, ]
head(datarank1)
datarank1 <- datarank1[,-(4)]
head(datarank1)
datarank2 <- data[data$rank == 2, ]
datarank2 <- datarank2[,-(4)]
datarank3 <- data[data$rank == 3, ]
datarank4 <- data[data$rank == 4, ]
model_rank_1 <- glm(admit ~ . , family = binomial(), data = )
model_rank_1 <- glm(admit ~ . , family = binomial(), data =datarank1)
summary(model_rank_1)
plot(model_rank_1)
print(anova(admit_fit1, test="Chisq"))
print(anova(model_rank_1, test="Chisq"))
datarank1$predicted_admit <- predict(model_rank_1 , type = "response")
plotting_object <- densityplot( ~ predicted_admit | admit,
data = datarank1,
layout = c(1,2), aspect=1, col = "darkblue",
plot.points = "rug",
strip=function(...) strip.default(..., style=1),
xlab="Predicted Probability of Taking Train")
library(lattice)
plotting_object <- densityplot( ~ predicted_admit | admit,
data = datarank1,
layout = c(1,2), aspect=1, col = "darkblue",
plot.points = "rug",
strip=function(...) strip.default(..., style=1),
xlab="Predicted Probability of Taking Train")
print(plotting_object)
datarank1$predicted_admit <- ifelse((datarank1$predicted_admit <.55), 2, 1)
datarank1$predicted_admit <- factor(datarank1$predicted_admit,
levels = c(1, 2), labels = c("Not Admit", "Admit"))
confusion_matrix <- table(datarank1$predicted_admit, datarank1$admit)
print(confusion_matrix)
cat("\nConfusion Matrix (rows = Predicted Choice, columns = Actual Choice\n")
print(confusion_matrix)
?confusion_matrix
?confusion_matrix
??confusion_matrix
plotting_object <- densityplot( ~ predicted_admit | admit,
data = datarank1,
layout = c(1,2), aspect=1, col = "darkblue",
plot.points = "rug",
strip=function(...) strip.default(..., style=1),
xlab="Predicted Probability of getting admitted in rank 1 institution")
print(plotting_object)
print(anova(model_rank_1, test="Chisq"))
datarank1$predicted_admit <- predict(model_rank_1 , type = "response")
plotting_object <- densityplot( ~ predicted_admit | admit,
data = datarank1,
layout = c(1,2), aspect=1, col = "darkblue",
plot.points = "rug",
strip=function(...) strip.default(..., style=1),
xlab="Predicted Probability of getting admitted in rank 1 institution")
print(plotting_object)
predictive_accuracy <- (confusion_matrix[1,1] + confusion_matrix[2,2])/
sum(confusion_matrix)
print(predictive_accuracy)
print(predictive_accuracy * 100)
# Minimum GRE to get admitted at 68% admission rate?
gre_grade_vector1 <-
seq(min(datarank1$gre), max(datarank1$gre), length=1000)
beta.vector1 <- model_rank_1$coefficients
admit_probability_vector1a <- numeric(1000)
confusion_matrix <- table(datarank1$predicted_admit, datarank1$admit)
confusion_matrix(rows = "predicted" , columns = "actual")
cat("\nConfusion Matrix (rows = Predicted Choice, columns = Actual Choice\n")
print(confusion_matrix)
datarank1$predicted_admit <- ifelse((datarank1$predicted_admit <.55), 2, 1)
datarank1$predicted_admit <- factor(datarank1$predicted_admit,
levels = c(1, 2), labels = c("Not Admit", "Admit"))
confusion_matrix <- table(datarank1$predicted_admit, datarank1$admit)
#confusion_matrix(rows = "predicted" , columns = "actual")
cat("\nConfusion Matrix (rows = Predicted Choice, columns = Actual Choice\n")
print(confusion_matrix)
datarank1$predicted_admit <- ifelse((datarank1$predicted_admit >.55), 2, 1)
confusion_matrix <- table(datarank1$predicted_admit, datarank1$admit)
#confusion_matrix(rows = "predicted" , columns = "actual")
cat("\nConfusion Matrix (rows = Predicted Choice, columns = Actual Choice\n")
print(confusion_matrix)
datarank1$predicted_admit <- ifelse((datarank1$predicted_admit >.55), 2, 1)
datarank1$predicted_admit <- ifelse((datarank1$predicted_admit > 0.55), 2, 1)
datarank1$predicted_admit <- factor(datarank1$predicted_admit,
levels = c(1, 2), labels = c("Not Admit", "Admit"))
confusion_matrix <- table(datarank1$predicted_admit, datarank1$admit)
#confusion_matrix(rows = "predicted" , columns = "actual")
cat("\nConfusion Matrix (rows = Predicted Choice, columns = Actual Choice\n")
print(confusion_matrix)
datarank1$predicted_admit <- ifelse((datarank1$predicted_admit > 0.55), 2, 1)
datarank1$predicted_admit <- ifelse((datarank1$predicted_admit > 0.55), 2, 1)
datarank1$predicted_admit
datarank1$predicted_admit <- predict(model_rank_1 , type = "response")
datarank1$predicted_admit <- ifelse((datarank1$predicted_admit > 0.55), 2, 1)
datarank1$predicted_admit
datarank1$predicted_admit <- factor(datarank1$predicted_admit,
levels = c(1, 2), labels = c("Not Admit", "Admit"))
confusion_matrix <- table(datarank1$predicted_admit, datarank1$admit)
#confusion_matrix(rows = "predicted" , columns = "actual")
cat("\nConfusion Matrix (rows = Predicted Choice, columns = Actual Choice\n")
print(confusion_matrix)
predictive_accuracy <- (confusion_matrix[1,1] + confusion_matrix[2,2])/
sum(confusion_matrix)
print(predictive_accuracy * 100)
# Minimum GRE to get admitted at 68% admission rate?
gre_grade_vector1 <-
seq(min(datarank1$gre), max(datarank1$gre), length=1000)
gre_grade_vector1
max(gre_grade_vector1)
beta.vector1 <- model_rank_1$coefficients
beta.vector1
admit_probability_vector1a <- numeric(1000)
admit_probability_vector1a
i = 1
X.vector1 <- c(1, gre_grade_vector1[i],
mean(datarank1$gpa))
x
X.vector1
exp(X.vector1 %*% beta.vector1)
beta.vector1
exp(X.vector1 * beta.vector1)
? %*%
X.vector1
beta.vector1
? '%*%'
x <- 1:4
x %*% x
x
gre_grade_vector1 <-
seq(min(datarank1$gre), max(datarank1$gre), length=1000)
beta.vector1 <- model_rank_1$coefficients
admit_probability_vector1a <- numeric(1000)
for (i in 1:1000) {
X.vector1 <- c(1, gre_grade_vector1[i],
mean(datarank1$gpa))
admit_probability_vector1a[i] <-
exp(X.vector1 %*% beta.vector1)/
(1 + exp(X.vector1 %*% beta.vector1))
}
admit_probability_vector1a
prop.table(table(datarank1$admit))
(table(datarank1$admit))
prop.table(datarank1$admit)
?prop.table()
x <- ifelse((gre_grade_vector1 > 0.55) 1, 2)
x <- ifelse((gre_grade_vector1 > 0.55), 1, 2)
prop.table(x)
prop.table(table(x))
x <- ifelse((gre_grade_vector1 > 0.55), 1, 0)
sum(x)
gre_grade_vector1
x <- ifelse((admit_probability_vector1a > 0.55), 1, 0)
x
sum(x)
sum(x) / 1000
150 / 333
